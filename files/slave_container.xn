---

# Depends only on the docker command and this repository

# Runs anywhere w/ only python interpreter, docker, and this repo
- command:
    # All commands/playbooks run with cwd==$WORKSPACE
    filepath: /bin/bash
    # This can be quite noisy, so send output into a file
    stdoutfile: $WORKSPACE/docker_build.stdout
    # $ADEPT_PATH and $WORKSPACE are automaticly set from called options
    arguments: |
        -c 'set -e;
            # Full inline comments supported
            /usr/bin/docker images | grep -q adept_slave || \
                # If the image does not exist, build it
                /usr/bin/docker build --file $ADEPT_PATH/files/slave.dockerfile \
                                      --rm \
                                      --force-rm \
                                      --pull \
                                      --tag adept_slave:latest \
                                      $ADEPT_PATH;'

- command:
    filepath: /usr/bin/docker
    arguments: >
        run --interactive
            --tty
            --rm
            # All runtime data persists here ($WORKSPACE)
            --volume $WORKSPACE:/var/lib/workspace:Z
            # All code/definitions persis here
            --volume $ADEPT_PATH:/var/lib/adept:Z
            # TODO: Read-only when --tmpfs available in 1.10+
            # --read-only
            # Image built above
            adept_slave:latest
            $ADEPT_CONTEXT
            /var/lib/workspace
            /var/lib/adept/files/slave.xn
            # N/B cleanup context uses different symantics for optional arg.
            # see last item (below)
            $ADEPT_OPTIONAL

- command:
    contexts:
        - cleanup
    filepath: /bin/bash
    # Impossible to invalidate package update/install layer w/o rebuilding
    arguments: |
        -c '# Do nothing if in verbose mode
            echo "$ADEPT_OPTIONAL" | grep -q "verbose" && exit 0

            set -e;

            # Five-days by default
            MAX=432000;

            CREATED=$(docker inspect --type=image \
                      --format="{{.Created}}" adept_slave:latest);
            AGE=$[$(date +%s) - $(date -d $CREATED +%s)];

            [ $AGE -lt $MAX ] || \
            # Do not prune potentially still viable build-cache
            /usr/bin/docker rmi --force \
                                adept_slave:latest;'

# Prune 5-day old(er) files from workspace so it doesn't constantly fill up
- command:
    contexts:
        - cleanup
    filepath: /bin/find
    arguments: "/mnt/workspaces -atime +5 -exec rm -f {} +"

